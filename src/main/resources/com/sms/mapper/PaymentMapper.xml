<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sms.dao.PaymentMapper" >
  <resultMap id="BaseResultMap" type="com.sms.model.Payment" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="member_id" property="memberId" jdbcType="INTEGER" />
    <result column="fee_id" property="feeId" jdbcType="INTEGER" />
    <result column="date" property="date" jdbcType="TIMESTAMP" />
  </resultMap>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, member_id, fee_id, date
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from payment
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from payment
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.sms.model.Payment" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into payment (member_id, fee_id,
      date)
    values (#{memberId,jdbcType=INTEGER}, #{feeId,jdbcType=INTEGER},
      now())
  </insert>
  <insert id="insertSelective" parameterType="com.sms.model.Payment" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into payment
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="memberId != null" >
        member_id,
      </if>
      <if test="feeId != null" >
        fee_id,
      </if>
      <if test="date != null" >
        date,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="memberId != null" >
        #{memberId,jdbcType=INTEGER},
      </if>
      <if test="feeId != null" >
        #{feeId,jdbcType=INTEGER},
      </if>
      <if test="date != null" >
        #{date,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.sms.model.Payment" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update payment
    <set >
      <if test="memberId != null" >
        member_id = #{memberId,jdbcType=INTEGER},
      </if>
      <if test="feeId != null" >
        fee_id = #{feeId,jdbcType=INTEGER},
      </if>
      <if test="date != null" >
        date = #{date,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sms.model.Payment" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update payment
    set member_id = #{memberId,jdbcType=INTEGER},
      fee_id = #{feeId,jdbcType=INTEGER},
      date = #{date,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <select id="getCount" resultType="int">
    select count(1) from payment
  </select>
  <select id="selectByPageStartIdAndLimitAndAsc" resultType="com.sms.model.Payment">
    select
    p.id as id, p.member_id as memberId, p.fee_id as feeId,f.name as feeName, m.name as memberName
    from payment p, fee f, member m
    where
    p.member_id = m.id and p.fee_id = f.id
    <![CDATA[ and  p.id > #{pageStartId,jdbcType=BIGINT}]]>
    order by p.id limit #{countPerPage}
  </select>
  <select id="selectByPageEndIdAndLimitAndDesc" resultType="com.sms.model.Payment" parameterType="map" >
    select
    *
    from
    (
    select
    p.id as id, p.member_id as memberId, p.fee_id as feeId,f.name as feeName, m.name as memberName
    from payment p, fee f, member m
    where <![CDATA[ and  p.id < #{pageEndId,jdbcType=BIGINT}]]>
    order by p.id desc limit #{countPerPage}
    ) U
    order by U.id ASC
  </select>
</mapper>