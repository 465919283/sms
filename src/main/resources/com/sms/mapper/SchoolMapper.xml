<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sms.dao.SchoolMapper" >
  <resultMap id="BaseResultMap" type="com.sms.model.School" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="telephone_number" property="telephoneNumber" jdbcType="VARCHAR" />
    <result column="school_type_id" property="schoolTypeId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, name, telephone_number, school_type_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from school
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from school
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.sms.model.School" useGeneratedKeys="true" keyProperty="id">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into school (id, name, telephone_number, 
      school_type_id)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{telephoneNumber,jdbcType=VARCHAR}, 
      #{schoolTypeId,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.sms.model.School" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into school
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="telephoneNumber != null" >
        telephone_number,
      </if>
      <if test="schoolTypeId != null" >
        school_type_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="telephoneNumber != null" >
        #{telephoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="schoolTypeId != null" >
        #{schoolTypeId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.sms.model.School" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update school
    <set >
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="telephoneNumber != null" >
        telephone_number = #{telephoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="schoolTypeId != null" >
        school_type_id = #{schoolTypeId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sms.model.School" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update school
    set name = #{name,jdbcType=VARCHAR},
      telephone_number = #{telephoneNumber,jdbcType=VARCHAR},
      school_type_id = #{schoolTypeId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="selectByName" resultMap="BaseResultMap" parameterType="java.lang.String">
    select 
    <include refid="Base_Column_List" />
    from school 
    where name = #{name,jdbcType=VARCHAR}
  </select>
  
  <select id="selectByPageStartIdAndLimitAndAsc" resultMap="BaseResultMap" parameterType="map" >
    select 
    <include refid="Base_Column_List" />
    from school 
    <![CDATA[ where id > #{pageStartId,jdbcType=BIGINT} ]]>    
    order by id ASC limit #{countPerPage,jdbcType=BIGINT}
  </select>
  
  <select id="selectByPageEndIdAndLimitAndDesc" resultMap="BaseResultMap" parameterType="map" >
    select 
    <include refid="Base_Column_List" />
    from
    (
    	select 
    	<include refid="Base_Column_List" />
    	from school 
    	<![CDATA[ where id < #{pageEndId,jdbcType=BIGINT} ]]>
    	order by id DESC limit #{countPerPage,jdbcType=BIGINT}
    ) U 
    order by U.id ASC
  </select>
  
  <select id="getTotalSchoolCount" resultType="java.lang.Integer" >
    select count(1) 
    from school 
  </select>
  
  <select id="selectSchoolPresidentBySchoolIds" resultType="com.sms.model.SchoolPresident" >
    SELECT A.school_id AS schoolId, U.name AS presidentName
    FROM user U 
    INNER JOIN user_role_association A ON U.id = A.user_id 
	WHERE A.school_id IN 
	<foreach collection="schoolIds" item="schoolId" open="(" close=")" separator=",">
      #{schoolId,jdbcType=INTEGER}
	</foreach>
	and A.role_id = 1 
	AND A.branch_school_id IS NULL 
	AND A.group_id IS NULL 
  </select>
  
  <select id="selectBranchSchoolCountBySchoolIds" resultType="com.sms.model.BranchSchoolCount" >
    SELECT BS.school_id schoolId, COUNT(*) branchSchoolCount
    FROM branch_school BS
	WHERE school_id IN 
	<foreach collection="schoolIds" item="schoolId" open="(" close=")" separator=",">
      #{schoolId,jdbcType=INTEGER}
	</foreach>
	GROUP BY school_id        
  </select>
  
  <select id="selectBySchoolIds" resultMap="BaseResultMap" >
  	select 
    <include refid="Base_Column_List" />
    from school 
	where id in  
	<foreach collection="schoolIds" item="schoolId" open="(" close=")" separator=",">
      #{schoolId,jdbcType=INTEGER}
	</foreach>
  </select>
  
  <select id="selectAll" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from school
  </select>
  
</mapper>