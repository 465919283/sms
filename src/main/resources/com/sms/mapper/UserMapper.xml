<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sms.dao.UserMapper">
  <resultMap id="BaseResultMap" type="com.sms.model.User">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="log_name" property="logName" jdbcType="VARCHAR" />
    <result column="log_password" property="logPassword" jdbcType="VARCHAR" />
    <result column="name" property="name" jdbcType="VARCHAR" />
    <result column="telephone_number" property="telephoneNumber" jdbcType="VARCHAR" />
    <result column="status" property="status" jdbcType="BIT" />
  </resultMap>
  <sql id="Base_Column_List">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    id, log_name, log_password, name, telephone_number, status
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    select 
    <include refid="Base_Column_List" />
    from user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    delete from user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.sms.model.User" useGeneratedKeys="true" keyProperty="id">
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into user (id, log_name, log_password, 
      name, telephone_number, status
      )
    values (#{id,jdbcType=INTEGER}, #{logName,jdbcType=VARCHAR}, #{logPassword,jdbcType=VARCHAR}, 
      #{name,jdbcType=VARCHAR}, #{telephoneNumber,jdbcType=VARCHAR}, #{status,jdbcType=BIT}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.sms.model.User" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    insert into user
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="logName != null" >
        log_name,
      </if>
      <if test="logPassword != null" >
        log_password,
      </if>
      <if test="name != null" >
        name,
      </if>
      <if test="telephoneNumber != null" >
        telephone_number,
      </if>
      <if test="status != null" >
        status,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="logName != null" >
        #{logName,jdbcType=VARCHAR},
      </if>
      <if test="logPassword != null" >
        #{logPassword,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="telephoneNumber != null" >
        #{telephoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        #{status,jdbcType=BIT},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.sms.model.User" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update user
    <set >
      <if test="logName != null" >
        log_name = #{logName,jdbcType=VARCHAR},
      </if>
      <if test="logPassword != null" >
        log_password = #{logPassword,jdbcType=VARCHAR},
      </if>
      <if test="name != null" >
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="telephoneNumber != null" >
        telephone_number = #{telephoneNumber,jdbcType=VARCHAR},
      </if>
      <if test="status != null" >
        status = #{status,jdbcType=BIT},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.sms.model.User" >
    <!--
      WARNING - @mbggenerated
      This element is automatically generated by MyBatis Generator, do not modify.
    -->
    update user
    set log_name = #{logName,jdbcType=VARCHAR},
      log_password = #{logPassword,jdbcType=VARCHAR},
      name = #{name,jdbcType=VARCHAR},
      telephone_number = #{telephoneNumber,jdbcType=VARCHAR},
      status = #{status,jdbcType=BIT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  
  <select id="selectByLogName" resultMap="BaseResultMap" parameterType="java.lang.String">
    select 
    <include refid="Base_Column_List" />
    from user 
    where (log_name) = #{logName,jdbcType=VARCHAR}
  </select>
  
  <select id="selectByPageAndAsc" resultMap="BaseResultMap" parameterType="map">
    select 
    <include refid="Base_Column_List" />
    from user 
    <![CDATA[ where id > #{pageStartId,jdbcType=BIGINT} ]]>    
    order by id ASC limit #{countPerPage,jdbcType=BIGINT}
  </select>
  
  <select id="selectPresidentsByPageAndAsc" resultMap="BaseResultMap" parameterType="map">
    select  U.id, U.log_name, U.name, U.telephone_number, U.status 
    from user U 
    inner join user_role_association A on U.id = A.user_id 
    <![CDATA[ where U.id > #{pageStartId,jdbcType=BIGINT} ]]> 
    and A.role_id = 1 
    group by U.id 
    order by U.id ASC limit #{countPerPage,jdbcType=BIGINT}
  </select>
  
  <select id="selectByPageDesc" resultMap="BaseResultMap" parameterType="map">
    select 
    <include refid="Base_Column_List" />
    from
    (
    	select 
    	<include refid="Base_Column_List" />
    	from user 
    	<![CDATA[ where id < #{pageEndId,jdbcType=BIGINT} ]]>
    	order by id DESC limit #{countPerPage,jdbcType=BIGINT}
    ) U 
    order by U.id ASC
  </select>
  
  <select id="selectPresidentsByPageAndDesc" resultMap="BaseResultMap" parameterType="map">
    select SQ.id, SQ.log_name, SQ.name, SQ.telephone_number, SQ.status
    from
    (
    	select  U.id, U.log_name, U.name, U.telephone_number, U.status 
    	from user U 
    	inner join user_role_association A on U.id = A.user_id 
    	<![CDATA[ where id < #{pageEndId,jdbcType=BIGINT} ]]>  
    	and A.role_id = 1 
    	group by U.id 
    	order by U.id DESC limit #{countPerPage,jdbcType=BIGINT} 
    ) SQ 
    order by SQ.id ASC
  </select>
  
  <select id="getTotalUserCount" resultType="java.lang.Integer">
    select count(1) 
    from user 
  </select>
  
  <select id="getTotalUserCountByRoleType" resultType="java.lang.Integer" parameterType="java.lang.Integer">
    select count(1) 
    from 
    ( 
      select U.id 
      from user U 
      INNER JOIN user_role_association A ON U.id = A.user_id 
      where A.role_id = #{roleType,jdbcType=INTEGER} 
      GROUP by U.id
    ) SubQuery
  </select>
  
  <select id="selectByName" resultMap="BaseResultMap" parameterType="java.lang.String">
    select 
    <include refid="Base_Column_List" />
    from user 
    where (name) = #{name,jdbcType=VARCHAR}
  </select>
  
   <select id="selectByRoleId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
     select  U.id, U.log_name, U.name, U.telephone_number, U.status 
     from user U 
     inner join user_role_association A on U.id = A.user_id 
     where A.role_id = #{roleId,jdbcType=INTEGER}
     group by U.id 
     order by U.id 
  </select>
  
  <select id="selectByUserIds" resultMap="BaseResultMap" >
  	select 
    <include refid="Base_Column_List" />
    from user 
	where id in  
	<foreach collection="userIds" item="userId" open="(" close=")" separator=",">
      #{userId,jdbcType=INTEGER}
	</foreach>
  </select>
  
  <select id="selectDirectorsBySchoolIdAndPageAndAsc" resultMap="BaseResultMap" parameterType="map">
    select  U.id, U.log_name, U.name, U.telephone_number, U.status 
    from user U 
    inner join user_role_association A on U.id = A.user_id 
    <![CDATA[ where U.id > #{pageStartId,jdbcType=BIGINT} ]]> 
    and A.school_id = #{schoolId,jdbcType=INTEGER} 
    and A.role_id = 2 
    group by U.id 
    order by U.id ASC limit #{countPerPage,jdbcType=BIGINT}
  </select>
  
  <select id="selectDirectorsBySchoolIdAndPageAndDesc" resultMap="BaseResultMap" parameterType="map">
    select SQ.id, SQ.log_name, SQ.name, SQ.telephone_number, SQ.status
    from
    (
    	select U.id, U.log_name, U.name, U.telephone_number, U.status 
    	from user U 
    	inner join user_role_association A on U.id = A.user_id 
    	<![CDATA[ where U.id < #{pageEndId,jdbcType=BIGINT} ]]> 
    	and A.school_id = #{schoolId,jdbcType=INTEGER} 
    	and A.role_id = 2 
    	group by U.id 
    	order by U.id DESC limit #{countPerPage,jdbcType=BIGINT} 
    ) SQ 
    order by SQ.id ASC
  </select>
  
  <select id="getDirectorCountBySchoolId" resultType="java.lang.Integer" parameterType="java.lang.Integer">
    select count(1) 
    from 
    ( 
      select U.id 
      from user U 
      INNER JOIN user_role_association A ON U.id = A.user_id 
      where A.role_id = 2 
      and A.school_id = #{schoolId,jdbcType=INTEGER} 
      and A.branch_school_id is null 
      GROUP by U.id 
    ) SubQuery 
  </select>
 
  <select id="selectDirectorsBySchoolId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select  U.id, U.log_name, U.name, U.telephone_number, U.status 
    from user U 
    inner join user_role_association A on U.id = A.user_id 
    where A.school_id = #{schoolId,jdbcType=INTEGER} 
    and A.role_id = 2 
    and A.branch_school_id is null 
    and A.group_id is null 
    group by U.id 
    order by U.id ASC 
  </select>
  
  <select id="selectGroupLeadersByBranchSchoolIdAndPageAndAsc" resultMap="BaseResultMap" parameterType="map">
    select  U.id, U.log_name, U.name, U.telephone_number, U.status 
    from user U 
    inner join user_role_association A on U.id = A.user_id 
    <![CDATA[ where U.id > #{pageStartId,jdbcType=BIGINT} ]]> 
    and A.branch_school_id = #{branchSchoolId,jdbcType=INTEGER} 
    and A.role_id = 3 
    group by U.id 
    order by U.id ASC limit #{countPerPage,jdbcType=BIGINT}
  </select>
  
  <select id="selectGroupLeadersByBranchSchoolIdAndPageAndDesc" resultMap="BaseResultMap" parameterType="map">
    select SQ.id, SQ.log_name, SQ.name, SQ.telephone_number, SQ.status
    from
    (
    	select U.id, U.log_name, U.name, U.telephone_number, U.status 
    	from user U 
    	inner join user_role_association A on U.id = A.user_id 
    	<![CDATA[ where U.id < #{pageEndId,jdbcType=BIGINT} ]]> 
    	and A.branch_school_id = #{branchSchoolId,jdbcType=INTEGER} 
    	and A.role_id = 3 
    	group by U.id 
    	order by U.id DESC limit #{countPerPage,jdbcType=BIGINT} 
    ) SQ 
    order by SQ.id ASC
  </select>
  
  <select id="getGroupLeaderCountByBranchSchoolId" resultType="java.lang.Integer" parameterType="java.lang.Integer">
    select count(1) 
    from 
    ( 
      select U.id 
      from user U 
      INNER JOIN user_role_association A ON U.id = A.user_id 
      where A.role_id = 3 
      and A.branch_school_id = #{branchSchoolId,jdbcType=INTEGER} 
      and A.group_id is null 
      GROUP by U.id 
    ) SubQuery 
  </select>
 
  <select id="selectGroupLeadersByBranchSchoolId" resultMap="BaseResultMap" parameterType="java.lang.Integer">
    select  U.id, U.log_name, U.name, U.telephone_number, U.status 
    from user U 
    inner join user_role_association A on U.id = A.user_id 
    where A.branch_school_id = #{branchSchoolId,jdbcType=INTEGER} 
    and A.role_id = 3 
    and A.group_id is null 
    group by U.id 
    order by U.id ASC 
  </select>
  
 </mapper>